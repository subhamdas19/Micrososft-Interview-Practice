Java

peek()	Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.
poll()	Retrieves and removes the head of this queue, or returns null if this queue is empty.
addAll(Collection<? extends E> c)	Adds all of the elements in the specified collection to this queue.
element()	Retrieves, but does not remove, the head of this queue.
remove()	Retrieves and removes the head of this queue.

Merge two sorted arrays using Priority queue

    Difficulty Level : Medium
    Last Updated : 09 Jul, 2021

Given two sorted arrays A[] and B[] of sizes N and M respectively, the task is to merge them in a sorted manner.

Examples:

    Input: A[] = { 5, 6, 8 }, B[] = { 4, 7, 8 }
    Output:  4 5 6 7 8 8

    Input: A[] = {1, 3, 4, 5}, B] = {2, 4, 6, 8} 
    Output: 1 2 3 4 4 5 6 8

    Input: A[] = {5, 8, 9}, B[] = {4, 7, 8} 
    Output: 4 5 7 8 8 9 


Recommended: Please try your approach on {IDE} first, before moving on to the solution.

Approach: The given problem, merging two sorted arrays using minheap already exists. But here the idea is to use a priority_queue to implement min-heap provided by STL. Follow the steps below to solve the problem: 

    Initialize a min priority queue say PQ to implement the Min Heap.
    Traverse the array A[], and push all the elements of the array into the PQ.
    Traverse the array B[], and push all the elements of the array into the PQ.
    Now put all the elements of the PQ into an array, say res[] popping the top element of the PQ one by one.
    Finally, print the sorted array res[] as the answer.

Below is the implementation of the above approach:

// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;
 
// Function to merge two arrays
void merge(int A[], int B[], int N, int M)
{
    // Stores the merged array
    int res[N + M];
 
    // Create a min priority_queue
    priority_queue<int, vector<int>, greater<int> > pq;
 
    // Traverse the array A[]
    for (int i = 0; i < N; i++)
        pq.push(A[i]);
 
    // Traverse the array B[]
    for (int i = 0; i < M; i++)
        pq.push(B[i]);
 
    int j = 0;
 
    // Iterate until the
    // pq is not empty
    while (!pq.empty()) {
 
        // Stores the top element
        // of pq into res[j]
        res[j++] = pq.top();
 
        // Removes the top element
        pq.pop();
    }
 
    // Print the merged array
    for (int i = 0; i < N + M; i++)
        cout << res[i] << ' ';
}
 
// Driver Code
int main()
{
 
    // Input
    int A[] = { 5, 6, 8 };
    int B[] = { 4, 7, 8 };
 
    int N = sizeof(A) / sizeof(A[0]);
    int M = sizeof(B) / sizeof(B[0]);
 
    // Function call
    merge(A, B, N, M);
 
    return 0;
}
