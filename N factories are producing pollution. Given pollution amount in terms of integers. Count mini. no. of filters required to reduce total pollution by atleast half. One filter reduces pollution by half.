A company has N factories, each producing some pollution every month. The company has decided to reduce its total fume emissions by equipping some of the factories with one or more filters.
Every such filter reduces the pollution of a factory by half. When a second (or subsequent) filter is applied, it again reduces by half the remaining pollution emitted after fitting the existing filter(s). For example, a factory that initially produces 6 units of pollution will generate 3 units with one filter, 1.5 units with two filters and 0.75 units with three filters.
You are given an array of N integers describing the amount of pollution produced by the factories. Your task is to find the minimum number of filters needed to decrease the total sum of pollution by at least half.
Write a function:
class Solution { public int solution(int(] A); }
which, given an array of integers A of length N, returns the minimum number of filters needed to reduce the total pollution by at least half.
Example: 1. Given A = [5, 19, 8, 1], your function should return 3. The initial total pollution is 5 + 19 + 8 + 1 = 33. We install two filters at the factory producing 19 units and one filter at the factory producing 8 units. Then the total pollution will be 5 + ((19 / 2)/ 2) + (8 / 2) + 1 = 5 + 4.75 + 4 + 1 = 14.75 which is less than 33 / 2 = 16.5, so we have achieved our goal.
Example: 2. Given A = [10, 10], your function should return 2, because we may install one filter at each factory.
Write an efficient algorithm.
arrays
Comments: 2
BestMost VotesNewest to OldestOldest to Newest
shishirt22's avatar
shishirt22
0

June 27, 2021 12:06 AM
Read More

This can be solved by priority queue or a mutil-set in c++.
Maintain two variables sum and target sum, where sum = sum of array element initially and targetsum =sum/2.
Push all element in Max-PQ, pop the element at the top, install a filter This can be solved by priority queue or a mutil-set in c++.
Maintain two variables sum and target sum, where sum = sum of array element initially and targetsum =sum/2.
Push all element in Max-PQ, pop the element at the top, install a filter there i.e update sum accordingly (sum =sum-popped_val/2). Add the element just popped back to queue with value popped_val/2.keep doing this till sum > targetsum
0
Reply
Share
Report
throwaway1973's avatar
throwaway1973
39

June 28, 2021 7:36 AM
Read More

Here's what I did, it's essentially a greedy approach. I think greedy would work here because you would subtract the number that would yield the maximum difference at that point by halving it. If you chose any other number, then it would take more steps for you to reach the overall halfway point as you would now be at a higher number from subtracting. I used a max heap to find number that would give you the greatest difference at every iteration. I think the time complexity would be O(nlog(n)*(maxDist)), where maxDist is the amount of times you'd half the largest number, the number of times you'd half other numbers should be less than that and in the worst case you'd half every number, and then log(n) for the remove max operation on the heap. Space would be O(n).

    public int minFilters(int [] arr){
        double limit = 0;
        double sumSoFar = 0;
        int filters = 0;
        Queue<Double> maxHeap = new PriorityQueue<>((a,b)->((b-a) < 0.0) ? -1 : ((b-a) > 0.0) ? 1 : 0);
        for(int i=0;i<arr.length;i++){
            limit += (double)(arr[i]);
            maxHeap.add((double)(arr[i])/2.0);
        }
        sumSoFar = limit;
        limit/=2.0;
        while(sumSoFar > limit){
            double currElem = maxHeap.remove();
            sumSoFar -= currElem;
            currElem /= 2.0;
            maxHeap.add(currElem);
            filters++;
        }
        return filters;
    }
